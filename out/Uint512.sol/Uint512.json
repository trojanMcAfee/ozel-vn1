{"abi":[{"type":"function","name":"add512x512","inputs":[{"name":"a0","type":"uint256","internalType":"uint256"},{"name":"a1","type":"uint256","internalType":"uint256"},{"name":"b0","type":"uint256","internalType":"uint256"},{"name":"b1","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"r0","type":"uint256","internalType":"uint256"},{"name":"r1","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"div512x256","inputs":[{"name":"a0","type":"uint256","internalType":"uint256"},{"name":"a1","type":"uint256","internalType":"uint256"},{"name":"b","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"r","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"divRem512x256","inputs":[{"name":"a0","type":"uint256","internalType":"uint256"},{"name":"a1","type":"uint256","internalType":"uint256"},{"name":"b","type":"uint256","internalType":"uint256"},{"name":"rem","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"r","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"mul256x256","inputs":[{"name":"a","type":"uint256","internalType":"uint256"},{"name":"b","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"r0","type":"uint256","internalType":"uint256"},{"name":"r1","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"mul512x256","inputs":[{"name":"a0","type":"uint256","internalType":"uint256"},{"name":"a1","type":"uint256","internalType":"uint256"},{"name":"b","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"r0","type":"uint256","internalType":"uint256"},{"name":"r1","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"mulMod256x256","inputs":[{"name":"a","type":"uint256","internalType":"uint256"},{"name":"b","type":"uint256","internalType":"uint256"},{"name":"c","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"r0","type":"uint256","internalType":"uint256"},{"name":"r1","type":"uint256","internalType":"uint256"},{"name":"r2","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"sqrt256","inputs":[{"name":"x","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"s","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"sqrt512","inputs":[{"name":"a0","type":"uint256","internalType":"uint256"},{"name":"a1","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"s","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"sub512x512","inputs":[{"name":"a0","type":"uint256","internalType":"uint256"},{"name":"a1","type":"uint256","internalType":"uint256"},{"name":"b0","type":"uint256","internalType":"uint256"},{"name":"b1","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"r0","type":"uint256","internalType":"uint256"},{"name":"r1","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"}],"bytecode":{"object":"0x61074f610035600b8282823980515f1a60731461002957634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009b575f3560e01c80637f36876e1161006e5780637f36876e1461011b578063957e07c51461012e5780639594adef1461014f57806399ed504f1461017d578063d75cadce14610190575f80fd5b806314d608821461009f57806320378d22146100d45780632ddb9a71146100f55780634301b89e14610108575b5f80fd5b6100ba6100ad366004610619565b9083019392841091010190565b604080519283526020830191909152015b60405180910390f35b6100e76100e2366004610648565b6101a3565b6040519081526020016100cb565b6100e761010336600461065f565b610355565b6100ba61011636600461067f565b6104b1565b6100ba61012936600461065f565b6104d4565b6100ba61013c366004610619565b8184039491909310929091039190910390565b61016261015d36600461067f565b6104f1565b604080519384526020840192909252908201526060016100cb565b6100e761018b36600461067f565b610517565b6100e761019e366004610619565b6105a0565b5f815f036101b257505f919050565b6001905081600160801b8114600160801b82111781608082021d915082604082021b9250600160401b8214600160401b831117905081604082021d915082602082021b92506401000000008214640100000000831117905081602082021d915082601082021b925062010000821462010000831117905081601082021d915082600882021b92506101008214610100831117905081600882021d915082600482021b9250601082146010831117905081600482021d915082600282021b925050816002600883146008841117021b9150506001818381610294576102946106a8565b048201901c905060018183816102ac576102ac6106a8565b048201901c905060018183816102c4576102c46106a8565b048201901c905060018183816102dc576102dc6106a8565b048201901c905060018183816102f4576102f46106a8565b048201901c9050600181838161030c5761030c6106a8565b048201901c90506001818381610324576103246106a8565b048201901c90505f81838161033b5761033b6106a8565b0490508082101561034c578161034e565b805b9392505050565b5f815f0361036d57610366836101a3565b90506104ab565b600160fe1b600160801b831060800292831b600160c01b811060400290811b600160e01b811060200290811b600160f01b811060100290811b600160f81b811060080290811b600160fc1b811060040290811b9586106002029490970192909201010193909301830184811b946101008290031c9190931b17915f6103f1846101a3565b90505f6103fe82806106d0565b61040890866106e7565b608083811b600185901b83831c5f81900382810690910185851b8c861c17838106919091018381049284900484830401929092019384019950949550909290839006919082811b6fffffffffffffffffffffffffffffffff8c1617908280029084811c9084901c118061048c5750608084901c608084901c14801561048c57508082105b156104985760018a0399505b600289048a901c99505050505050505050505b92915050565b5f805f198386099483029593909202858510948690039490940393909301925050565b5f805f198385098385029250828110838203039150509250929050565b5f80805f1985870985870293508381108482030392505083858709905093509350939050565b5f815f198409828482089050828582085f84810385168082038190046001018389109097039687029290970387900491909117959093049284900390506105695761056282856106fa565b905061034e565b5060026003820281188083028203028083028203028083028203028083028203028083028203028083029091030283029392505050565b5f8281038316808203819004600101838710909503948502958390038190049590951794909204918381036105e0576105d983866106fa565b9050610611565b5060026003830281188084028203028084028203028084028203028084028203028084028203028084029091030284025b949350505050565b5f805f806080858703121561062c575f80fd5b5050823594602084013594506040840135936060013592509050565b5f60208284031215610658575f80fd5b5035919050565b5f8060408385031215610670575f80fd5b50508035926020909101359150565b5f805f60608486031215610691575f80fd5b505081359360208301359350604090920135919050565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176104ab576104ab6106bc565b818103818111156104ab576104ab6106bc565b5f8261071457634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212201c79242a772a78f9a4c6a79e7f89d6508f77e776d5660c95855f50d387daf93264736f6c63430008180033","sourceMap":"59:12406:40:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;59:12406:40;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x730000000000000000000000000000000000000000301460806040526004361061009b575f3560e01c80637f36876e1161006e5780637f36876e1461011b578063957e07c51461012e5780639594adef1461014f57806399ed504f1461017d578063d75cadce14610190575f80fd5b806314d608821461009f57806320378d22146100d45780632ddb9a71146100f55780634301b89e14610108575b5f80fd5b6100ba6100ad366004610619565b9083019392841091010190565b604080519283526020830191909152015b60405180910390f35b6100e76100e2366004610648565b6101a3565b6040519081526020016100cb565b6100e761010336600461065f565b610355565b6100ba61011636600461067f565b6104b1565b6100ba61012936600461065f565b6104d4565b6100ba61013c366004610619565b8184039491909310929091039190910390565b61016261015d36600461067f565b6104f1565b604080519384526020840192909252908201526060016100cb565b6100e761018b36600461067f565b610517565b6100e761019e366004610619565b6105a0565b5f815f036101b257505f919050565b6001905081600160801b8114600160801b82111781608082021d915082604082021b9250600160401b8214600160401b831117905081604082021d915082602082021b92506401000000008214640100000000831117905081602082021d915082601082021b925062010000821462010000831117905081601082021d915082600882021b92506101008214610100831117905081600882021d915082600482021b9250601082146010831117905081600482021d915082600282021b925050816002600883146008841117021b9150506001818381610294576102946106a8565b048201901c905060018183816102ac576102ac6106a8565b048201901c905060018183816102c4576102c46106a8565b048201901c905060018183816102dc576102dc6106a8565b048201901c905060018183816102f4576102f46106a8565b048201901c9050600181838161030c5761030c6106a8565b048201901c90506001818381610324576103246106a8565b048201901c90505f81838161033b5761033b6106a8565b0490508082101561034c578161034e565b805b9392505050565b5f815f0361036d57610366836101a3565b90506104ab565b600160fe1b600160801b831060800292831b600160c01b811060400290811b600160e01b811060200290811b600160f01b811060100290811b600160f81b811060080290811b600160fc1b811060040290811b9586106002029490970192909201010193909301830184811b946101008290031c9190931b17915f6103f1846101a3565b90505f6103fe82806106d0565b61040890866106e7565b608083811b600185901b83831c5f81900382810690910185851b8c861c17838106919091018381049284900484830401929092019384019950949550909290839006919082811b6fffffffffffffffffffffffffffffffff8c1617908280029084811c9084901c118061048c5750608084901c608084901c14801561048c57508082105b156104985760018a0399505b600289048a901c99505050505050505050505b92915050565b5f805f198386099483029593909202858510948690039490940393909301925050565b5f805f198385098385029250828110838203039150509250929050565b5f80805f1985870985870293508381108482030392505083858709905093509350939050565b5f815f198409828482089050828582085f84810385168082038190046001018389109097039687029290970387900491909117959093049284900390506105695761056282856106fa565b905061034e565b5060026003820281188083028203028083028203028083028203028083028203028083028203028083029091030283029392505050565b5f8281038316808203819004600101838710909503948502958390038190049590951794909204918381036105e0576105d983866106fa565b9050610611565b5060026003830281188084028203028084028203028084028203028084028203028084028203028084029091030284025b949350505050565b5f805f806080858703121561062c575f80fd5b5050823594602084013594506040840135936060013592509050565b5f60208284031215610658575f80fd5b5035919050565b5f8060408385031215610670575f80fd5b50508035926020909101359150565b5f805f60608486031215610691575f80fd5b505081359360208301359350604090920135919050565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176104ab576104ab6106bc565b818103818111156104ab576104ab6106bc565b5f8261071457634e487b7160e01b5f52601260045260245ffd5b50049056fea26469706673582212201c79242a772a78f9a4c6a79e7f89d6508f77e776d5660c95855f50d387daf93264736f6c63430008180033","sourceMap":"59:12406:40:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2371:193;;;;;;:::i;:::-;2508:11;;;;2546:10;;;2533:11;;2529:28;;2371:193;;;;;586:25:169;;;642:2;627:18;;620:34;;;;559:18;2371:193:40;;;;;;;;8380:1261;;;;;;:::i;:::-;;:::i;:::-;;;1004:25:169;;;992:2;977:18;8380:1261:40;850:185:169;10046:2417:40;;;;;;:::i;:::-;;:::i;1029:243::-;;;;;;:::i;:::-;;:::i;404:199::-;;;;;;:::i;:::-;;:::i;3022:193::-;;;;;;:::i;:::-;3159:11;;;;3197:10;;;;3184:11;;;;3180:28;;;;;3022:193;1645:250;;;;;;:::i;:::-;;:::i;:::-;;;;1824:25:169;;;1880:2;1865:18;;1858:34;;;;1908:18;;;1901:34;1812:2;1797:18;1645:250:40;1614:327:169;6284:1793:40;;;;;;:::i;:::-;;:::i;4030:1685::-;;;;;;:::i;:::-;;:::i;8380:1261::-;8429:9;8451:1;8456;8451:6;8447:20;;-1:-1:-1;8466:1:40;;8380:1261;-1:-1:-1;8380:1261:40:o;8447:20::-;8492:1;8487:6;;8510:1;-1:-1:-1;;;8580:4:40;8577:45;-1:-1:-1;;;8533:4:40;8530:45;8527:96;8654:4;8648:3;8643;8639:13;8635:24;8627:32;;8686:1;8681:2;8676:3;8672:12;8668:20;8663:25;;-1:-1:-1;;;8737:4:40;8734:29;-1:-1:-1;;;8706:4:40;8703:29;8700:64;8693:71;;8794:4;8789:2;8784:3;8780:12;8776:23;8768:31;;8826:1;8821:2;8816:3;8812:12;8808:20;8803:25;;8875:11;8869:4;8866:21;8852:11;8846:4;8843:21;8840:48;8833:55;;8918:4;8913:2;8908:3;8904:12;8900:23;8892:31;;8950:1;8945:2;8940:3;8936:12;8932:20;8927:25;;8995:7;8989:4;8986:17;8976:7;8970:4;8967:17;8964:40;8957:47;;9034:4;9029:2;9024:3;9020:12;9016:23;9008:31;;9065:1;9061;9056:3;9052:11;9048:19;9043:24;;9108:5;9102:4;9099:15;9091:5;9085:4;9082:15;9079:36;9072:43;;9144:4;9140:1;9135:3;9131:11;9127:22;9119:30;;9175:1;9171;9166:3;9162:11;9158:19;9153:24;;9217:4;9211;9208:14;9201:4;9195;9192:14;9189:34;9182:41;;9252:4;9248:1;9243:3;9239:11;9235:22;9227:30;;9283:1;9279;9274:3;9270:11;9266:19;9261:24;;;9341:1;9337;9330:3;9324:4;9321:13;9315:3;9309:4;9306:13;9303:32;9299:40;9295:48;9290:53;;;9386:1;9380;9376;:5;;;;;:::i;:::-;;9372:1;:9;9371:16;;9367:20;;9411:1;9405;9401;:5;;;;;:::i;:::-;;9397:1;:9;9396:16;;9392:20;;9436:1;9430;9426;:5;;;;;:::i;:::-;;9422:1;:9;9421:16;;9417:20;;9461:1;9455;9451;:5;;;;;:::i;:::-;;9447:1;:9;9446:16;;9442:20;;9486:1;9480;9476;:5;;;;;:::i;:::-;;9472:1;:9;9471:16;;9467:20;;9511:1;9505;9501;:5;;;;;:::i;:::-;;9497:1;:9;9496:16;;9492:20;;9536:1;9530;9526;:5;;;;;:::i;:::-;;9522:1;:9;9521:16;;9517:20;;9542:25;9574:1;9570;:5;;;;;:::i;:::-;;9542:33;;9592:17;9587:1;:22;;:46;;9632:1;9587:46;;;9612:17;9587:46;9580:53;8380:1261;-1:-1:-1;;;8380:1261:40:o;10046:2417::-;10108:9;10178:2;10184:1;10178:7;10174:31;;10194:11;10202:2;10194:7;:11::i;:::-;10187:18;;;;10174:31;-1:-1:-1;;;;;;10319:43:40;;10364:3;10315:53;10378:15;;;-1:-1:-1;;;10443:59:40;;10504:2;10439:68;10517:15;;;-1:-1:-1;;;10582:67:40;;10651:2;10578:76;10664:15;;;-1:-1:-1;;;10729:71:40;;10802:2;10725:80;10815:15;;;-1:-1:-1;;;10880:73:40;;10955:1;10876:81;10967:15;;;-1:-1:-1;;;11032:74:40;;11108:1;11028:82;11120:15;;;11185:74;;;11261:1;11181:82;10545:18;;;;10692;;;;10843;10995;11148;;;;11301;;11372:14;;;;11345:3;11341:15;;;11337:24;11273:15;;;;11330:32;;10269:13;11409:11;11330:32;11409:7;:11::i;:::-;11396:24;-1:-1:-1;11430:10:40;11449:7;11396:24;;11449:7;:::i;:::-;11443:14;;:2;:14;:::i;:::-;11563:3;12210:9;;;11589:1;11585:10;;;11955:12;;;11462:11;11980:78;;;12115:13;;;12104:25;;;11545:12;;;11559;;;11542:30;11628:15;;;12097:33;;;;12146:13;;;12074;;;;11604:15;;;12067:21;12139;;;;12209:15;;;;-1:-1:-1;11430:27:40;;-1:-1:-1;11585:10:40;;12169:13;;;;;12139:21;12245:8;;;12263:34;12258:39;;12244:54;;12317:5;;;;12349:8;;;12336;;;;12335:23;;:66;;;12384:3;12379:1;:8;;12370:3;12365:1;:8;;12364:24;12363:37;;;;;12398:2;12393;:7;12363:37;12331:93;;;12417:1;12413;:5;12409:9;;12331:93;12453:1;12445:5;:9;12439:1;:16;;12432:23;;;;;;;;;;;10046:2417;;;;;:::o;1029:243::-;1105:10;;-1:-1:-1;;1168:1:40;1164:2;1157:21;1188:10;;;;1254;;;;1225;;;1212:11;;;;1208:28;;;;1246:19;;;;;-1:-1:-1;;1029:243:40:o;404:199::-;467:10;;-1:-1:-1;;529:1:40;526;519:20;556:1;553;549:9;543:15;;592:2;588;585:10;580:2;576;572:11;568:28;562:34;;;404:199;;;;;:::o;1645:250::-;1722:10;;;-1:-1:-1;;1796:1:40;1793;1786:20;1823:1;1820;1816:9;1810:15;;1859:2;1855;1852:10;1847:2;1843;1839:11;1835:28;1829:34;;;1886:1;1883;1880;1873:15;1867:21;;1645:250;;;;;;;:::o;6284:1793::-;6360:9;6449:1;-1:-1:-1;;6437:2:40;6430:21;6478:1;6474:2;6469:3;6462:18;6455:25;;6507:1;6503:2;6498:3;6491:18;6937:1;6933:9;;;6929:17;;7432:11;;;7428:21;;;7451:1;7424:29;6557:11;;;6549:20;;;7479:12;;;6579;;;;7392;;;7472:20;;;;;6964:11;;;;7580:7;;;;-1:-1:-1;7576:26:40;;7596:6;7601:1;7596:2;:6;:::i;:::-;7589:13;;;;7576:26;-1:-1:-1;7743:1:40;7736;7732:9;;7728:17;;7781:11;;;7774:19;;7765:29;7830:11;;;7823:19;;7814:29;7879:11;;;7872:19;;7863:29;7928:11;;;7921:19;;7912:29;7977:11;;;7970:19;;7961:29;8026:11;;;8019:19;;;8010:29;8058:12;;6284:1793;;;;;:::o;4030:1685::-;4122:9;4570;;;4566:17;;5069:11;;;5065:21;;;5088:1;5061:29;4194:11;;;4186:20;;;5116:12;;;4216;;;;5029;;;5109:20;;;;;4601:11;;;;5218:7;;;5214:26;;5234:6;5239:1;5234:2;:6;:::i;:::-;5227:13;;;;5214:26;-1:-1:-1;5381:1:40;5374;5370:9;;5366:17;;5419:11;;;5412:19;;5403:29;5468:11;;;5461:19;;5452:29;5517:11;;;5510:19;;5501:29;5566:11;;;5559:19;;5550:29;5615:11;;;5608:19;;5599:29;5664:11;;;5657:19;;;5648:29;5696:12;;4030:1685;;;;;;;:::o;14:385:169:-;100:6;108;116;124;177:3;165:9;156:7;152:23;148:33;145:53;;;194:1;191;184:12;145:53;-1:-1:-1;;217:23:169;;;287:2;272:18;;259:32;;-1:-1:-1;338:2:169;323:18;;310:32;;389:2;374:18;361:32;;-1:-1:-1;14:385:169;-1:-1:-1;14:385:169:o;665:180::-;724:6;777:2;765:9;756:7;752:23;748:32;745:52;;;793:1;790;783:12;745:52;-1:-1:-1;816:23:169;;665:180;-1:-1:-1;665:180:169:o;1040:248::-;1108:6;1116;1169:2;1157:9;1148:7;1144:23;1140:32;1137:52;;;1185:1;1182;1175:12;1137:52;-1:-1:-1;;1208:23:169;;;1278:2;1263:18;;;1250:32;;-1:-1:-1;1040:248:169:o;1293:316::-;1370:6;1378;1386;1439:2;1427:9;1418:7;1414:23;1410:32;1407:52;;;1455:1;1452;1445:12;1407:52;-1:-1:-1;;1478:23:169;;;1548:2;1533:18;;1520:32;;-1:-1:-1;1599:2:169;1584:18;;;1571:32;;1293:316;-1:-1:-1;1293:316:169:o;1946:127::-;2007:10;2002:3;1998:20;1995:1;1988:31;2038:4;2035:1;2028:15;2062:4;2059:1;2052:15;2078:127;2139:10;2134:3;2130:20;2127:1;2120:31;2170:4;2167:1;2160:15;2194:4;2191:1;2184:15;2210:168;2283:9;;;2314;;2331:15;;;2325:22;;2311:37;2301:71;;2352:18;;:::i;2383:128::-;2450:9;;;2471:11;;;2468:37;;;2485:18;;:::i;2516:217::-;2556:1;2582;2572:132;;2626:10;2621:3;2617:20;2614:1;2607:31;2661:4;2658:1;2651:15;2689:4;2686:1;2679:15;2572:132;-1:-1:-1;2718:9:169;;2516:217::o","linkReferences":{}},"methodIdentifiers":{"add512x512(uint256,uint256,uint256,uint256)":"14d60882","div512x256(uint256,uint256,uint256)":"99ed504f","divRem512x256(uint256,uint256,uint256,uint256)":"d75cadce","mul256x256(uint256,uint256)":"7f36876e","mul512x256(uint256,uint256,uint256)":"4301b89e","mulMod256x256(uint256,uint256,uint256)":"9594adef","sqrt256(uint256)":"20378d22","sqrt512(uint256,uint256)":"2ddb9a71","sub512x512(uint256,uint256,uint256,uint256)":"957e07c5"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b1\",\"type\":\"uint256\"}],\"name\":\"add512x512\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"div512x256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rem\",\"type\":\"uint256\"}],\"name\":\"divRem512x256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mul256x256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"mul512x256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"mulMod256x256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sqrt256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a1\",\"type\":\"uint256\"}],\"name\":\"sqrt512\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b1\",\"type\":\"uint256\"}],\"name\":\"sub512x512\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add512x512(uint256,uint256,uint256,uint256)\":{\"params\":{\"a0\":\"A uint256 representing the lower bits of the first addend.\",\"a1\":\"A uint256 representing the higher bits of the first addend.\",\"b0\":\"A uint256 representing the lower bits of the seccond addend.\",\"b1\":\"A uint256 representing the higher bits of the seccond addend.\"},\"returns\":{\"r0\":\"The result as an uint512. r0 contains the lower bits.\",\"r1\":\"The higher bits of the result.\"}},\"div512x256(uint256,uint256,uint256)\":{\"details\":\"For a detailed explaination see:   https://www.researchgate.net/publication/235765881_Efficient_long_division_via_Montgomery_multiply.\",\"params\":{\"a0\":\"A uint256 representing the low bits of the nominator.\",\"a1\":\"A uint256 representing the high bits of the nominator.\",\"b\":\"A uint256 representing the denominator.\"},\"returns\":{\"r\":\"The result as an uint256. Result must have at most 256 bit.\"}},\"divRem512x256(uint256,uint256,uint256,uint256)\":{\"details\":\"For a detailed explaination see:   https://www.researchgate.net/publication/235765881_Efficient_long_division_via_Montgomery_multiply.\",\"params\":{\"a0\":\"A uint256 representing the low bits of the nominator.\",\"a1\":\"A uint256 representing the high bits of the nominator.\",\"b\":\"A uint256 representing the denominator.\",\"rem\":\"A uint256 representing the remainder of the devision. The algorithm is cheaper to compute if the remainder is known. The remainder often be retreived cheaply using the mulmod and addmod operations.\"},\"returns\":{\"r\":\"The result as an uint256. Result must have at most 256 bit.\"}},\"mul256x256(uint256,uint256)\":{\"details\":\"Used the chinese remainder theoreme\",\"params\":{\"a\":\"A uint256 representing the first factor.\",\"b\":\"A uint256 representing the second factor.\"},\"returns\":{\"r0\":\"The result as an uint512. r0 contains the lower bits.\",\"r1\":\"The higher bits of the result.\"}},\"mul512x256(uint256,uint256,uint256)\":{\"details\":\"Used the chinese remainder theoreme\",\"params\":{\"a0\":\"A uint256 representing lower bits of the first factor.\",\"a1\":\"A uint256 representing higher bits of the first factor.\",\"b\":\"A uint256 representing the second factor.\"},\"returns\":{\"r0\":\"The result as an uint512. r0 contains the lower bits.\",\"r1\":\"The higher bits of the result.\"}},\"mulMod256x256(uint256,uint256,uint256)\":{\"details\":\"Used the chinese remainder theoreme\",\"params\":{\"a\":\"A uint256 representing the first factor.\",\"b\":\"A uint256 representing the second factor.\"},\"returns\":{\"r0\":\"The result as an uint512. r0 contains the lower bits.\",\"r1\":\"The higher bits of the result.\",\"r2\":\"The remainder.\"}},\"sqrt256(uint256)\":{\"details\":\"Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\",\"params\":{\"x\":\"The uint256 number for which to calculate the square root.\"},\"returns\":{\"s\":\"The square root as an uint256.\"}},\"sqrt512(uint256,uint256)\":{\"details\":\"Uses the Karatsuba Square Root method. See https://hal.inria.fr/inria-00072854/document for details.\",\"params\":{\"a0\":\"A uint256 representing the low bits of the input.\",\"a1\":\"A uint256 representing the high bits of the input.\"},\"returns\":{\"s\":\"The square root as an uint256. Result has at most 256 bit.\"}},\"sub512x512(uint256,uint256,uint256,uint256)\":{\"params\":{\"a0\":\"A uint256 representing the lower bits of the minuend.\",\"a1\":\"A uint256 representing the higher bits of the minuend.\",\"b0\":\"A uint256 representing the lower bits of the subtrahend.\",\"b1\":\"A uint256 representing the higher bits of the subtrahend.\"},\"returns\":{\"r0\":\"The result as an uint512. r0 contains the lower bits.\",\"r1\":\"The higher bits of the result.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add512x512(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the difference of two uint512\"},\"div512x256(uint256,uint256,uint256)\":{\"notice\":\"Calculates the division of a 512 bit unsigned integer by a 256 bit integer. It  requires the result to fit in a 256 bit integer. \"},\"divRem512x256(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the division of a 512 bit unsigned integer by a 256 bit integer. It  requires the remainder to be known and the result must fit in a 256 bit integer. \"},\"mul256x256(uint256,uint256)\":{\"notice\":\"Calculates the product of two uint256\"},\"mul512x256(uint256,uint256,uint256)\":{\"notice\":\"Calculates the product of two uint512 and uint256\"},\"mulMod256x256(uint256,uint256,uint256)\":{\"notice\":\"Calculates the product and remainder of two uint256\"},\"sqrt256(uint256)\":{\"notice\":\"Calculates the square root of x, rounding down.\"},\"sqrt512(uint256,uint256)\":{\"notice\":\"Calculates the square root of a 512 bit unsigned integer, rounding down.\"},\"sub512x512(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the difference of two uint512\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Uint512.sol\":\"Uint512\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@ensdomains/=node_modules/@ensdomains/\",\":@eth-optimism/=node_modules/@eth-optimism/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@prb/=node_modules/@prb/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":solady/=node_modules/solady/\"]},\"sources\":{\"contracts/libraries/Uint512.sol\":{\"keccak256\":\"0x458baafc5432492e16fc77f29d5fd9a0f8b900deba7329b6c0555061f42002fe\",\"license\":\"GPLv3\",\"urls\":[\"bzz-raw://bbb40692f73cf5b675eb910b350ab98f806b81ca2e8c68f348a60a7ab64b37f4\",\"dweb:/ipfs/QmS5jGBrRhykrUh1dNz3aC8EDVckiJTc9RP9oiyJzXtobk\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"a0","type":"uint256"},{"internalType":"uint256","name":"a1","type":"uint256"},{"internalType":"uint256","name":"b0","type":"uint256"},{"internalType":"uint256","name":"b1","type":"uint256"}],"stateMutability":"pure","type":"function","name":"add512x512","outputs":[{"internalType":"uint256","name":"r0","type":"uint256"},{"internalType":"uint256","name":"r1","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"a0","type":"uint256"},{"internalType":"uint256","name":"a1","type":"uint256"},{"internalType":"uint256","name":"b","type":"uint256"}],"stateMutability":"pure","type":"function","name":"div512x256","outputs":[{"internalType":"uint256","name":"r","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"a0","type":"uint256"},{"internalType":"uint256","name":"a1","type":"uint256"},{"internalType":"uint256","name":"b","type":"uint256"},{"internalType":"uint256","name":"rem","type":"uint256"}],"stateMutability":"pure","type":"function","name":"divRem512x256","outputs":[{"internalType":"uint256","name":"r","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"a","type":"uint256"},{"internalType":"uint256","name":"b","type":"uint256"}],"stateMutability":"pure","type":"function","name":"mul256x256","outputs":[{"internalType":"uint256","name":"r0","type":"uint256"},{"internalType":"uint256","name":"r1","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"a0","type":"uint256"},{"internalType":"uint256","name":"a1","type":"uint256"},{"internalType":"uint256","name":"b","type":"uint256"}],"stateMutability":"pure","type":"function","name":"mul512x256","outputs":[{"internalType":"uint256","name":"r0","type":"uint256"},{"internalType":"uint256","name":"r1","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"a","type":"uint256"},{"internalType":"uint256","name":"b","type":"uint256"},{"internalType":"uint256","name":"c","type":"uint256"}],"stateMutability":"pure","type":"function","name":"mulMod256x256","outputs":[{"internalType":"uint256","name":"r0","type":"uint256"},{"internalType":"uint256","name":"r1","type":"uint256"},{"internalType":"uint256","name":"r2","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"}],"stateMutability":"pure","type":"function","name":"sqrt256","outputs":[{"internalType":"uint256","name":"s","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"a0","type":"uint256"},{"internalType":"uint256","name":"a1","type":"uint256"}],"stateMutability":"pure","type":"function","name":"sqrt512","outputs":[{"internalType":"uint256","name":"s","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"a0","type":"uint256"},{"internalType":"uint256","name":"a1","type":"uint256"},{"internalType":"uint256","name":"b0","type":"uint256"},{"internalType":"uint256","name":"b1","type":"uint256"}],"stateMutability":"pure","type":"function","name":"sub512x512","outputs":[{"internalType":"uint256","name":"r0","type":"uint256"},{"internalType":"uint256","name":"r1","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"add512x512(uint256,uint256,uint256,uint256)":{"params":{"a0":"A uint256 representing the lower bits of the first addend.","a1":"A uint256 representing the higher bits of the first addend.","b0":"A uint256 representing the lower bits of the seccond addend.","b1":"A uint256 representing the higher bits of the seccond addend."},"returns":{"r0":"The result as an uint512. r0 contains the lower bits.","r1":"The higher bits of the result."}},"div512x256(uint256,uint256,uint256)":{"details":"For a detailed explaination see:   https://www.researchgate.net/publication/235765881_Efficient_long_division_via_Montgomery_multiply.","params":{"a0":"A uint256 representing the low bits of the nominator.","a1":"A uint256 representing the high bits of the nominator.","b":"A uint256 representing the denominator."},"returns":{"r":"The result as an uint256. Result must have at most 256 bit."}},"divRem512x256(uint256,uint256,uint256,uint256)":{"details":"For a detailed explaination see:   https://www.researchgate.net/publication/235765881_Efficient_long_division_via_Montgomery_multiply.","params":{"a0":"A uint256 representing the low bits of the nominator.","a1":"A uint256 representing the high bits of the nominator.","b":"A uint256 representing the denominator.","rem":"A uint256 representing the remainder of the devision. The algorithm is cheaper to compute if the remainder is known. The remainder often be retreived cheaply using the mulmod and addmod operations."},"returns":{"r":"The result as an uint256. Result must have at most 256 bit."}},"mul256x256(uint256,uint256)":{"details":"Used the chinese remainder theoreme","params":{"a":"A uint256 representing the first factor.","b":"A uint256 representing the second factor."},"returns":{"r0":"The result as an uint512. r0 contains the lower bits.","r1":"The higher bits of the result."}},"mul512x256(uint256,uint256,uint256)":{"details":"Used the chinese remainder theoreme","params":{"a0":"A uint256 representing lower bits of the first factor.","a1":"A uint256 representing higher bits of the first factor.","b":"A uint256 representing the second factor."},"returns":{"r0":"The result as an uint512. r0 contains the lower bits.","r1":"The higher bits of the result."}},"mulMod256x256(uint256,uint256,uint256)":{"details":"Used the chinese remainder theoreme","params":{"a":"A uint256 representing the first factor.","b":"A uint256 representing the second factor."},"returns":{"r0":"The result as an uint512. r0 contains the lower bits.","r1":"The higher bits of the result.","r2":"The remainder."}},"sqrt256(uint256)":{"details":"Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.","params":{"x":"The uint256 number for which to calculate the square root."},"returns":{"s":"The square root as an uint256."}},"sqrt512(uint256,uint256)":{"details":"Uses the Karatsuba Square Root method. See https://hal.inria.fr/inria-00072854/document for details.","params":{"a0":"A uint256 representing the low bits of the input.","a1":"A uint256 representing the high bits of the input."},"returns":{"s":"The square root as an uint256. Result has at most 256 bit."}},"sub512x512(uint256,uint256,uint256,uint256)":{"params":{"a0":"A uint256 representing the lower bits of the minuend.","a1":"A uint256 representing the higher bits of the minuend.","b0":"A uint256 representing the lower bits of the subtrahend.","b1":"A uint256 representing the higher bits of the subtrahend."},"returns":{"r0":"The result as an uint512. r0 contains the lower bits.","r1":"The higher bits of the result."}}},"version":1},"userdoc":{"kind":"user","methods":{"add512x512(uint256,uint256,uint256,uint256)":{"notice":"Calculates the difference of two uint512"},"div512x256(uint256,uint256,uint256)":{"notice":"Calculates the division of a 512 bit unsigned integer by a 256 bit integer. It  requires the result to fit in a 256 bit integer. "},"divRem512x256(uint256,uint256,uint256,uint256)":{"notice":"Calculates the division of a 512 bit unsigned integer by a 256 bit integer. It  requires the remainder to be known and the result must fit in a 256 bit integer. "},"mul256x256(uint256,uint256)":{"notice":"Calculates the product of two uint256"},"mul512x256(uint256,uint256,uint256)":{"notice":"Calculates the product of two uint512 and uint256"},"mulMod256x256(uint256,uint256,uint256)":{"notice":"Calculates the product and remainder of two uint256"},"sqrt256(uint256)":{"notice":"Calculates the square root of x, rounding down."},"sqrt512(uint256,uint256)":{"notice":"Calculates the square root of a 512 bit unsigned integer, rounding down."},"sub512x512(uint256,uint256,uint256,uint256)":{"notice":"Calculates the difference of two uint512"}},"version":1}},"settings":{"remappings":["@chainlink/=node_modules/@chainlink/","@ensdomains/=node_modules/@ensdomains/","@eth-optimism/=node_modules/@eth-optimism/","@openzeppelin/=node_modules/@openzeppelin/","@prb/=node_modules/@prb/","@uniswap/=node_modules/@uniswap/","base64-sol/=node_modules/base64-sol/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","solady/=node_modules/solady/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/libraries/Uint512.sol":"Uint512"},"evmVersion":"cancun","libraries":{}},"sources":{"contracts/libraries/Uint512.sol":{"keccak256":"0x458baafc5432492e16fc77f29d5fd9a0f8b900deba7329b6c0555061f42002fe","urls":["bzz-raw://bbb40692f73cf5b675eb910b350ab98f806b81ca2e8c68f348a60a7ab64b37f4","dweb:/ipfs/QmS5jGBrRhykrUh1dNz3aC8EDVckiJTc9RP9oiyJzXtobk"],"license":"GPLv3"}},"version":1},"id":40}